Perl VI Problem Set
====================

1.  Write a program named "pali.pl" to detect palindromes. It must be able to handle changes in case.
 
% pali.pl "Madam in Eden Im Adam"
 
yes!
 
% pali.pl gatcctag
 
yes!
 
% pali.pl "cold spring harbor laboratory"
 
                  no!
 
2. Modify the program to work even if there is extraneous punctuation  (Hint:s///):
 
 % pali.pl "A man, a plan, a canal... Panama"
 
  yes!
 
      
3. In the Nobody.txt file (/pfbhome/data/Perl_III_nobody.txt) substitute every occurrence of 'Nobody' with your favorite person's name and save the file as YourFavoritePersonName.txt (ex. Michael.txt).

4. Find all the lines in a FASTA file (/pfbhome/data/Perl_VI.fasta) that are the header (>seqName desc) using pattern matching.

5. If a line matches the format of a FASTA header, extract the sequence name and description using sub patterns as well as $1 and $2. 
	- Print id:"extracted seq name" desc:"extracted description"

6. Create or modify your FASTA parser to use regular expressions. Also make sure your parser can deal with a sequence that is split over many lines.

7.The enzyme ApoI has a restriction site: R^AATTY where R and Y are degenerate
nucleotideides. See the IUPAC table to identify the nucleotide possibilities
for the R and Y.

Write a regular expression to find and print all occurrences of the site in the following sequence (also available at /pfbhome/data/Perl_VI_ApoI.fasta). 

>seq1
GAATTCAAGTTCTTGTGCGCACACAAATCCAATAAAAACTATTGTGCACACAGACGCGAC
TTCGCGGTCTCGCTTGTTCTTGTTGTATTCGTATTTTCATTTCTCGTTCTGTTTCTACTT
AACAATGTGGTGATAATATAAAAAATAAAGCAATTCAAAAGTGTATGACTTAATTAATGA
GCGATTTTTTTTTTGAAATCAAATTTTTGGAACATTTTTTTTAAATTCAAATTTTGGCGA
AAATTCAATATCGGTTCTACTATCCATAATATAATTCATCAGGAATACATCTTCAAAGGC
AAACGGTGACAACAAAATTCAGGCAATTCAGGCAAATACCGAATGACCAGCTTGGTTATC
AATTCTAGAATTTGTTTTTTGGTTTTTATTTATCATTGTAAATAAGACAAACATTTGTTC
CTAGTAAAGAATGTAACACCAGAAGTCACGTAAAATGGTGTCCCCATTGTTTAAACGGTT
GTTGGGACCAATGGAGTTCGTGGTAACAGTACATCTTTCCCCTTGAATTTGCCATTCAAA
ATTTGCGGTGGAATACCTAACAAATCCAGTGAATTTAAGAATTGCGATGGGTAATTGACA
TGAATTCCAAGGTCAAATGCTAAGAGATAGTTTAATTTATGTTTGAGACAATCAATTCCC
CAATTTTTCTAAGACTTCAATCAATCTCTTAGAATCCGCCTCTGGAGGTGCACTCAGCCG
CACGTCGGGCTCACCAAATATGTTGGGGTTGTCGGTGAACTCGAATAGAAATTATTGTCG
CCTCCATCTTCATGGCCGTGAAATCGGCTCGCTGACGGGCTTCTCGCGCTGGATTTTTTC
ACTATTTTTGAATACATCATTAACGCAATATATATATATATATATTTAT



8. Determine the site(s) of the physical cut(s) by ApoI in the above sequence. Print out the sequence with "^" at the cut site.

    Hints:
        Use subpatterns (parentheses and $1, $2) to find the cut site within the pattern.
        Use s///

    Example: if the pattern is GACGT^CT the following sequence

    AAAAAAAAGACGTCTTTTTTTAAAAAAAAGACGTCTTTTTTT

    would be cut like this:

    AAAAAAAAGACGT^CTTTTTTTAAAAAAAAGACGT^CTTTTTTT


9. Now that you've done your restriction digest, determine the lengths of your fragments and sort them by length (in the same order they would separate on an electrophoresis gel).

    Hint: take a look at the split man page or think about storing your matches in an array. With one of these two approaches you should be able to convert this string:

       AAAAAAAAGACGT^CTTTTTTTAAAAAAAAGACGT^CTTTTTTT


    into this array:

    ("AAAAAAAAGACGT","CTTTTTTTAAAAAAAAGACGT","CTTTTTTT")


EXTRA CREDIT:
1. Use the provided data file (/pfbhome/data/Perl_VI_neb.txt) to fill a hash of enzymes paired with their recognition patterns. 
   Be aware of the header lines, and be aware of how the columns are delimited.
2. Write a script which takes two command line arguments: the name of an enzyme and a fasta file with a sequence to be cut. 
   If the provided enzyme is present in the hash, and will act successfully on the provided sequence, print out:
     - the provided sequence, annotated with cut sites
     - the number of fragments
     - the fragments in their natural order (unsorted)
     - the fragments in sorted order (largest to smallest)
