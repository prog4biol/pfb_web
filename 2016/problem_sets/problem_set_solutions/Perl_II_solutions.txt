Perl II Problem Set:
===================
 
1. Create a script ("add.pl") that takes two numbers from the command line and adds them.
   % add.pl 2 3
 
   5

+---------------------------+
#!/usr/bin/perl
# File: add.pl
# Author: Steven Ahrendt

use strict;
use warnings;

my $x = shift @ARGV;
my $y = shift @ARGV;
my $sum = $x+$y;

print "$sum\n";
+---------------------------+


 
2. Modify the "add.pl" script from the previous problem set so that it checks that both arguments are defined (hint, use function defined.)
 
   % add.pl 2 3
 
   5
 
   % add.pl 2
 
   Please provide two numbers.    



+---------------------------+
#!/usr/bin/perl
# File: add2.pl                                                                                                                                                                                                
# Author: Steven Ahrendt

use strict;
use warnings;

my $x = shift @ARGV;
my $y = shift @ARGV;

if (defined($x) and defined($y))
{
   my $sum = $x+$y;
   print "$sum\n";
} 
else 
{
  print "Please provide two numbers.\n";
}
+---------------------------+



 
3. Modify the script again so that it checks that both arguments are positive numbers. Zero is allowed, but -1 is not:
 
  % add.pl 2 -3
 
  Please provide two positive numbers.    
 


+---------------------------+
#!/usr/bin/perl
# File: add3.pl
# Author: Steven Ahrendt

use strict;
use warnings;

my $x = shift @ARGV;
my $y = shift @ARGV;

if ((defined($x) and defined($y)) and ($x>=0 and $y>=0))
{
  my $sum = $x+$y;
  print "$sum\n";
} 
else
{
  print "Please provide two positive numbers.\n";
} 
+---------------------------+



4.   Write a script ("order.pl") to compare two strings given on the command line arguments and print "right order" if they are in alphabetic order, and "wrong order" if they are not:
 
 % order.pl Fred Lucy
 
 right order
 
 % order.pl Lucy Fred
 
wrong order

 
+---------------------------+
#!/usr/bin/perl
# File: order.pl
# Author: Steven Ahrendt

use strict;
use warnings;

my $str1 = shift @ARGV;
my $str2 = shift @ARGV;

## Error check to ensure that some input was 
#   provided on the command line
if (defined($str1) and defined($str2))
{
  if ($str1 lt $str2) 
  {
    print "right order\n"
  } 
  else 
  {
    print "wrong order\n";
  }
}
else
{
  print "Please provide two strings\n";
}
+---------------------------+



5.  Write a script ("reorder.pl") to compare two strings given on the command line and print them out in correct alphabetic order:
 
 % reorder.pl Fred Lucy
 
 Fred Lucy
 
 % reorder.pl Lucy Fred
 
  Fred Lucy
 

+---------------------------+
#!/usr/bin/perl
# File: reorder.pl
# Author: Steven Ahrendt

use strict;
use warnings;

my $str1 = shift @ARGV;
my $str2 = shift @ARGV;

## Error check to ensure that some input was 
#   provided on the command line
if (defined($str1) and defined($str2))
{
  if ($str1 lt $str2)
  {
    print "$str1 $str2\n"
  } 
  else 
  {
    print "$str2 $str1\n";
  }
}
else
{
  print "Please provide two strings\n";
}
+---------------------------+




6. Write a script named "same.pl" to read two strings from the command line. Compare them in a case-sensitive manner and print "same" if they are the same, "different" if they are different:
 
 % same.pl lucy Lucy
 
 different
 

+---------------------------+
#!/usr/bin/perl
# File: same.pl
# Author: Steven Ahrendt

use strict;
use warnings;

my $str1 = shift @ARGV;
my $str2 = shift @ARGV;

## Error check to ensure that some input was 
#   provided on the command line
if (defined($str1) and defined($str2))
{
  if ($str1 eq $str2)
  {
    print "same\n"
  } 
  else 
  {
    print "different\n";
  }
}
else
{
  print "Please provide two strings\n";
}
+---------------------------+



7. Modify this script to compare the strings in a case-INsensitive manner (hint, use the "lc" or "uc" functions to change string to upper or lowercase.


+---------------------------+
#!/usr/bin/perl
# File: same2.pl
# Author: Steven Ahrendt

use strict;
use warnings;

my $str1 = shift @ARGV;
my $str2 = shift @ARGV;

## Error check to ensure that some input was 
#   provided on the command line
if (defined($str1) and defined($str2))
{
  if (lc($str1) eq lc($str2)) # Could also use uc() here
  {
    print "same\n"
  } 
  else 
  {
    print "different\n";
  }
}
else
{
  print "Please provide two strings\n";
}
+---------------------------+



8.  Write a script named "percent.pl" to calculate percentages, where the percentage is $i/($i+$j) * 100. Make sure that the script does not crash when given two numbers that add up to zero:
 
% percent.pl 50 150
 
25%
 
% percent.pl 50 -50
 
You are trying to trick me! at line 4.
 

+---------------------------+
#!/usr/bin/perl
# File: percent.pl
# Author: Steven Ahrendt

use strict;
use warnings;

my $i = shift @ARGV;
my $j = shift @ARGV;

## Error check to ensure that some input was 
#   provided on the command line
if (defined($i) and defined($j))
{
  if ($i+$j) == 0)
  {
    print "You are trying to trick me!\n";
  } 
  else 
  {
    my $percent = 100*($i/($i+$j));
    print "$percent%\n";
  }
}
else
{
  print "Please provide two numbers\n";
}
+---------------------------+


9. Modify this script to use the printf() function to produce nicely formatted floating point numbers (hint:  try "man sprintf" and "man printf" or look it up online to learn about this wonderful function).
 
% percent.pl 50 150
 
25.00 %
 
 
+---------------------------+
#!/usr/bin/perl
# File: percent2.pl
# Author: Steven Ahrendt

use strict;
use warnings;

my $i = shift @ARGV;
my $j = shift @ARGV;

## Error check to ensure that some input was 
#   provided on the command line
if (defined($i) and defined($j))
{
  if ($i+$j) == 0)
  {
    print "You are trying to trick me!\n";
  } 
  else 
  {
    my $percent = 100*($i/($i+$j));
    printf ("%.2f %%\n",$percent); # the '%%' is required to produce a literal percent sign
  }
}
else
{
  print "Please provide two numbers\n";
}
+---------------------------+
