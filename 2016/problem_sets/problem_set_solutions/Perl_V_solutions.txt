Perl V Problem Set
====================

1. Create a hash of your favorite 5 genes and their nucleotide sequences, using the "all at once" method, see below as well as the lecture notes. Make the genes the keys and the sequences the values.
  All at once:
  %hash = ( 
       key1 => value1, 
       key2 => value2, 
       key3 => value3 
    ); 
 
2. Create a the same hash with your favorite 5 genes and their nucleotide sequences, using the "one at a time" method, see below as well as the lecture notes. Make the genes the keys and the sequences the values.
  One at a time:
  my %hash;
  $hash{key1} = value1; 
  $hash{key2} = value2;
  $hash{key3} = value3; 

3. With a foreach loop, iterate through each key (gene name) of your hash.
  - Print each key and value in this format "gene:seq\n";
  - Are the genes printing in the order you added them to the hash? Why?

4. After printing the hash in the above question, reassign one of the sequences to be AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA. Print out the hash again.

+---------------------------+
#!/usr/bin/perl
# File: perlV_1to4.pl
# Author: Steven Ahrendt

use strict;
use warnings;
 
## Problem 1: all at once hash creation
my %seqs = (
     gene1 => "seq1",
     gene2 => "seq2",
     gene3 => "seq3",
     gene4 => "seq4",
     gene5 => "seq5",
);     

## Problem 2: one at a time hash creation

$seqs{gene1} = "seq1";
$seqs{gene2} = "seq2";
$seqs{gene3} = "seq3";
$seqs{gene4} = "seq4";
$seqs{gene5} = "seq5";

## Problem 3: print the hash output
print "Hash output:\n";
foreach my $key (keys %seqs)
{
  print "$key:$seqs{$key}\n"
}

print "\n\n\n";

## Problem 4: reassign and print
print "Reassignment and output:\n";
$seqs{key4} = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
foreach my $key (keys %seqs)
{
  print "$key:$seqs{$key}\n"
}
+---------------------------+

5. Copy the text file (/home/pfb2015/data/Perl_V_genesAndSeq.txt), open it, and build a hash with the first column as the key and the second as the value.

6. With a foreach loop, iterate through each key (gene name) of your hash.
  - Calculate the length of each seq
  - Print the output in this format "name:length\t\seq\n";

+---------------------------+
#!/usr/bin/perl
# File: perlV_5to6.pl
# Author: Steven Ahrendt
use warnings;
use strict;

## Problem 5
my $infile = shift @ARGV;
my %sequences;   # Empty hash, will store fasta sequences from file
open(IN,'<',$infile) or die "Can't open $infile: $!\n";

while(my $line = <IN>)
{
  chomp $line;
  my ($key,$value) = split(/\t/,$line);
  $sequences{$key} = $value;
}
close(IN);

## Problem 6
# Check the contents of the hash
foreach my $key (keys %sequences)
{
  my $len = length ($sequences{$key});
  print "$key:$len\t$sequences{$key}\n";
}
+---------------------------+


 
7. Create your hash with gene names and sequences from a FASTA file (/home/pfb2015/data/Perl_V.fasta). You will have to parse out the gene names and sequences from the file.

8. With a foreach loop, iterate through each gene name (key) in your hash.
  - Print each key/value pair. "name:length\tseq\n"
  - Now, add a sort (default) of the keys and print each value.
  - Now, sort (numeric, smallest to biggest) by the length of the sequence, and print each key/value pair as well as the length of the sequence.
  - Now, sort biggest to smallest. Print each key/value pair as well the length of the sequence



+---------------------------+
#!/usr/bin/perl
# File: perlV_7to8.pl
# Author: Steven Ahrendt

use warnings;
use strict;

## Problem 7
my $fasta = shift @ARGV;
my %sequences;   # Empty hash, will store fasta sequences from file
my $c = 0; # seq counter
my $seq = '';
my $seq_name = ''; 
open(FAS,'<',$fasta) or die "Can't open $fasta: $!\n";

while(my $line = <FAS>)
{
  chomp $line;
  if ($line =~ m/^>/)
  {
    $c++;
    ## Using the seq counter is another way to check if you're 
    #   on the first sequence or not
    if($c > 1)
    {
      $sequences{$seq_name} = $seq;
      $seq = '';
    }
    $seq_name = $line;
  }
  else
  {
    $seq .= $line;
  }
}

$sequences{$seq_name} = $seq;
close(FAS);

## Problem 6
# Check the contents of the hash

foreach my $key (keys %sequences)
{
  print "$key:$sequences{$key}\n";
}

print "\n\n\n\n";

# Sort first
print "Sort first:\n";
foreach my $key (sort keys %sequences)
{
  print "$key:",length($sequences{$key}),"\n$sequences{$key}\n";
}
print "\n\n\n\n";

# Sort numeric, small to large by value
print "Sort numeric (small to large):\n";
foreach my $key (sort { length($sequences{$a}) <=> length($sequences{$b})} keys %sequences)
{
  print "$key:",length($sequences{$key}),"\n$sequences{$key}\n";
}
print "\n\n\n\n";

# Sort numeric, large to small by value
print "Sort numeric (large to small):\n";
foreach my $key (sort {length($sequences{$b}) <=> length($sequences{$a}) }keys %sequences)
{
  print "$key:",length($sequences{$key}),"\n$sequences{$key}\n";
}
+---------------------------+



9. In a new script, determine and report the codon usage for a DNA sequence
  - Create a string containing a DNA sequence
  - Within a for loop 
    - use the function substr ($seq, $offset, 3) to extract codons
    - store each codon and the number of times it has occurred in a hash

+---------------------------+
#!/usr/bin/perl                                                                                                                                                                 
# File: codonUsage.pl
# Author: Steven Ahrendt

use warnings;
use strict;

my $seq = "CGTGACCGCCATGGATGTGGTGTACGCTCTGAAGAGGCAGGGCCGCACTCTGTACGGCTTCGGCGGTTAA";
my %codons;

for (my $offset = 0; $offset < length($seq); $offset+=3)
{
  my $codon = substr($seq, $offset, 3);
  $codons{$codon}++;
}

foreach my $key (sort keys %codons)
{
  print "$key\t$codons{$key}\n"
}
+---------------------------+
